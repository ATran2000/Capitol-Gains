{"ast":null,"code":"var _jsxFileName = \"/Users/cambenassi/Documents/Code/Personal Projects/Capitol Gains/Capitol-Gains/client/src/components/Trades.js\";\nimport Trade from './Trade';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction sorted(trades, sortMethod) {\n  if (sortMethod === \"new\") {\n    //sort by oldest\n    //\n    function dateComparison(a, b) {\n      const date1 = new Date(a);\n      const date2 = new Date(b);\n      return date1 - date2;\n    }\n\n    trades.sort(dateComparison);\n  }\n\n  if (sortMethod === \"old\") {//sort by oldest\n    //\n  }\n\n  if (sortMethod === \"stock\") {\n    //sort by storck\n    trades.sort((a, b) => a.stock > b.stock ? 1 : -1);\n  }\n\n  if (sortMethod === \"sector\") {\n    //sort by sector\n    trades.sort((a, b) => a.sector > b.sector ? 1 : -1);\n  }\n\n  if (sortMethod === \"transaction\") {\n    //sort by sector\n    trades.sort((a, b) => a.buy_sell > b.buy_sell ? 1 : -1);\n  }\n\n  if (sortMethod === \"amount\") {//sort by oldest\n    //\n  }\n}\n\nconst trades = _ref => {\n  let {\n    trades\n  } = _ref;\n  let sortMethod = \"stock\";\n  sorted(trades, sortMethod);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"trades\",\n    children: trades.map(trade => /*#__PURE__*/_jsxDEV(Trade, {\n      trade: trade\n    }, trade.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\nexport default trades;\n/*\nfunction sorted(tradeInfo) {\n    if (tradeInfo.sortMethod === \"stock\") { //sort by storck\n        tradeInfo.trades.sort((a, b) => (a.stock > b.stock) ? 1 : -1);\n    }\n    if (tradeInfo.sortMethod === \"sector\") { //sort by sector\n        tradeInfo.trades.sort((a, b) => (a.sector > b.sector) ? 1 : -1);\n    }\n}\n\nconst trades = ({ tradeInfo }) => {\n    sorted(tradeInfo);\n\n    return (\n        <div className=\"trades\">\n        {tradeInfo.trades.map((trade) => (\n            <Trade  key={trade.id} trade={trade} />\n        ))}\n        </div>\n    )\n}*/","map":{"version":3,"sources":["/Users/cambenassi/Documents/Code/Personal Projects/Capitol Gains/Capitol-Gains/client/src/components/Trades.js"],"names":["Trade","sorted","trades","sortMethod","dateComparison","a","b","date1","Date","date2","sort","stock","sector","buy_sell","map","trade","id"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,SAAlB;;;AAEA,SAASC,MAAT,CAAgBC,MAAhB,EAAwBC,UAAxB,EAAoC;AAChC,MAAIA,UAAU,KAAK,KAAnB,EAA0B;AAAE;AACxB;AACA,aAASC,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;AAC1B,YAAMC,KAAK,GAAG,IAAIC,IAAJ,CAASH,CAAT,CAAd;AACA,YAAMI,KAAK,GAAG,IAAID,IAAJ,CAASF,CAAT,CAAd;AAEA,aAAOC,KAAK,GAAGE,KAAf;AACH;;AAEDP,IAAAA,MAAM,CAACQ,IAAP,CAAYN,cAAZ;AAEH;;AACD,MAAID,UAAU,KAAK,KAAnB,EAA0B,CAAE;AACxB;AACH;;AACD,MAAIA,UAAU,KAAK,OAAnB,EAA4B;AAAE;AAC1BD,IAAAA,MAAM,CAACQ,IAAP,CAAY,CAACL,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACM,KAAF,GAAUL,CAAC,CAACK,KAAb,GAAsB,CAAtB,GAA0B,CAAC,CAAjD;AACH;;AACD,MAAIR,UAAU,KAAK,QAAnB,EAA6B;AAAE;AAC3BD,IAAAA,MAAM,CAACQ,IAAP,CAAY,CAACL,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACO,MAAF,GAAWN,CAAC,CAACM,MAAd,GAAwB,CAAxB,GAA4B,CAAC,CAAnD;AACH;;AACD,MAAIT,UAAU,KAAK,aAAnB,EAAkC;AAAE;AAChCD,IAAAA,MAAM,CAACQ,IAAP,CAAY,CAACL,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACQ,QAAF,GAAaP,CAAC,CAACO,QAAhB,GAA4B,CAA5B,GAAgC,CAAC,CAAvD;AACH;;AACD,MAAIV,UAAU,KAAK,QAAnB,EAA6B,CAAE;AAC3B;AACH;AACJ;;AAED,MAAMD,MAAM,GAAG,QAAgB;AAAA,MAAf;AAAEA,IAAAA;AAAF,GAAe;AAC3B,MAAIC,UAAU,GAAG,OAAjB;AACAF,EAAAA,MAAM,CAACC,MAAD,EAASC,UAAT,CAAN;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,cACCD,MAAM,CAACY,GAAP,CAAYC,KAAD,iBACR,QAAC,KAAD;AAAuB,MAAA,KAAK,EAAEA;AAA9B,OAAaA,KAAK,CAACC,EAAnB;AAAA;AAAA;AAAA;AAAA,YADH;AADD;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAXD;;AAaA,eAAed,MAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import Trade from './Trade'\n\nfunction sorted(trades, sortMethod) {\n    if (sortMethod === \"new\") { //sort by oldest\n        //\n        function dateComparison(a, b) {\n            const date1 = new Date(a)\n            const date2 = new Date(b)\n            \n            return date1 - date2;\n        }\n        \n        trades.sort(dateComparison);\n\n    }    \n    if (sortMethod === \"old\") { //sort by oldest\n        //\n    }\n    if (sortMethod === \"stock\") { //sort by storck\n        trades.sort((a, b) => (a.stock > b.stock) ? 1 : -1);\n    }\n    if (sortMethod === \"sector\") { //sort by sector\n        trades.sort((a, b) => (a.sector > b.sector) ? 1 : -1);\n    }\n    if (sortMethod === \"transaction\") { //sort by sector\n        trades.sort((a, b) => (a.buy_sell > b.buy_sell) ? 1 : -1);\n    }\n    if (sortMethod === \"amount\") { //sort by oldest\n        //\n    }        \n}\n\nconst trades = ({ trades }) => {\n    let sortMethod = \"stock\";\n    sorted(trades, sortMethod);\n\n    return (\n        <div className=\"trades\">\n        {trades.map((trade) => (\n            <Trade  key={trade.id} trade={trade} />\n        ))}\n        </div>\n    )\n}\n\nexport default trades\n\n/*\nfunction sorted(tradeInfo) {\n    if (tradeInfo.sortMethod === \"stock\") { //sort by storck\n        tradeInfo.trades.sort((a, b) => (a.stock > b.stock) ? 1 : -1);\n    }\n    if (tradeInfo.sortMethod === \"sector\") { //sort by sector\n        tradeInfo.trades.sort((a, b) => (a.sector > b.sector) ? 1 : -1);\n    }\n}\n\nconst trades = ({ tradeInfo }) => {\n    sorted(tradeInfo);\n\n    return (\n        <div className=\"trades\">\n        {tradeInfo.trades.map((trade) => (\n            <Trade  key={trade.id} trade={trade} />\n        ))}\n        </div>\n    )\n}*/"]},"metadata":{},"sourceType":"module"}